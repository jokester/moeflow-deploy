version: "3.8"

services:
  moeflow-mongodb:
    image: ${DH_DOMAIN}/mongo:4.4.1
    restart: unless-stopped
    volumes:
      - ./mongodb/data/db:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASS}
    networks:
      - default
    healthcheck:
      test: ["CMD","mongo", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 5s
      start_period: 10s

  moeflow-rabbitmq:
    image: ${DH_DOMAIN}/rabbitmq:3.8.9-management
    restart: unless-stopped
    volumes:
      - ./rabbitmq:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST_NAME}
    networks:
      - default
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      start_period: 10s

  moeflow-backend: &backend_base
    # overrides for local dev
    # TODO: should prepend `pip install` to gunicorn
    # build: ../moeflow-backend  # for local dev
    # command: gunicorn -t 120 -w 4 --reload -b 0.0.0.0:5000 "app:create_app()"
    image: ${GHCR_DOMAIN}/${MOEFLOW_BACKEND_IMAGE}:${MOEFLOW_BACKEND_VERSION}
    command: gunicorn -t 120 -w 4 -b 0.0.0.0:5000 "app:create_app()"
    volumes:
      - ./storage:/app/storage
      - ./logs/moeflow-backend:/app/logs
    environment:
      CONFIG_PATH: "/app/config.py"
    env_file:
      - .env
    networks:
      - default
    restart: unless-stopped
    depends_on:
      moeflow-backend-init:
        condition: service_completed_successfully

  moeflow-backend-init:
    <<: *backend_base
    command: python3 manage.py migrate
    restart: 'no'
    depends_on: &backend-deps
      moeflow-rabbitmq:
        condition: service_healthy
      moeflow-mongodb:
        condition: service_healthy

  moeflow-celery-default:
    <<: *backend_base
    command: celery --app app.celery worker --queues default --hostname celery.default --loglevel=info

  moeflow-celery-output:
    <<: *backend_base
    command: celery --app app.celery worker --queues output --hostname celery.output --loglevel=info

  moeflow-celery-mit:
    build:
      dockerfile: ../manga-image-translator/Dockerfile.moeflow_worker
      context: ../manga-image-translator
      cache_from:
        - type=local,src=/var/conda/cache,user=root
    restart: unless-stopped
    volumes:
      - ../manga-image-translator:/app:ro
      - ./storage:/var/lib/moeflow-storage
      - ./mit-root:/root:rw # for models in /root/.cache/huggingface
      # - ./mit-root:/root:rw
    env_file:
      - '.env-mit-worker'
    entrypoint: bash
    command:
      - -uexc
      # - pipdeptree
      # - pwd; ls
      - |
        # exec conda run -n mit-py311 celery --app moeflow_worker worker --queues mit --loglevel=debug --concurrency=2
        # conda activate mit-py311
        # make conda-env
        # exec celery --app moeflow_worker worker --queues mit --loglevel=debug --concurrency=2
        # conda run -n mit-py311 --no-capture-output pip list
        conda run -n mit-py311 --no-capture-output conda env update --prune --file conda.yaml
        exec conda run -n mit-py311 --no-capture-output celery --app moeflow_worker worker --queues mit --loglevel=debug --concurrency=8
    links: [moeflow-rabbitmq, moeflow-mongodb]
    profiles: [MIT]
    depends_on: *backend-deps
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities:
                - gpu
  moeflow-frontend:
    image: ${GHCR_DOMAIN}/${MOEFLOW_FRONTEND_IMAGE}:${MOEFLOW_FRONTEND_VERSION}
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/certificates:/certificates
      - ./storage:/storage
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    environment:
      DOMAIN: ${DOMAIN}
      MAX_CONTENT_LENGTH_MB: ${MAX_CONTENT_LENGTH_MB}
    links: [moeflow-backend]
    networks:
      - default

networks:
  default:
    name: moeflow
